package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"strconv"

	"github.com/aereal/poc-graphql-pqs-server/domain"
	"github.com/aereal/poc-graphql-pqs-server/graph/dto"
	"github.com/aereal/poc-graphql-pqs-server/graph/executableschema"
	"github.com/aereal/poc-graphql-pqs-server/graph/loaders"
)

// Character is the resolver for the character field.
func (r *queryResolver) Character(ctx context.Context, name string) (*domain.Character, error) {
	character, err := loaders.GetCharacterByName(ctx, name)
	if err != nil {
		return nil, err
	}
	return character, nil
}

// Characters is the resolver for the characters field.
func (r *queryResolver) Characters(ctx context.Context, order *dto.CharactersOrder, filter *domain.CharacterFilterCriteria, first uint) (*dto.CharacterConnection, error) {
	opts := make([]domain.SearchCharactersOption, 0)
	opts = append(opts, domain.WithLimit(first))
	if order != nil {
		opts = append(opts, domain.WithCharacterOrder(order.Field, order.Direction))
	}
	if filter != nil {
		opts = append(opts, domain.WithCharacterFilterCriteria(filter))
	}
	characters, hasNext, err := r.characterRepo.SearchCharacters(ctx, opts...)
	if err != nil {
		return nil, err
	}
	pageInfo := &dto.PageInfo{HasNext: hasNext}
	if len(characters) > 0 {
		endCursor := strconv.Itoa(characters[len(characters)-1].ID) // TODO
		pageInfo.EndCursor = &endCursor
	}
	conn := &dto.CharacterConnection{
		PageInfo: pageInfo,
		Nodes:    characters,
	}
	return conn, nil
}

// Query returns executableschema.QueryResolver implementation.
func (r *Resolver) Query() executableschema.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
