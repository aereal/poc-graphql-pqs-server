// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/aereal/poc-graphql-pqs-server/config"
	"github.com/aereal/poc-graphql-pqs-server/domain"
	"github.com/aereal/poc-graphql-pqs-server/graph"
	"github.com/aereal/poc-graphql-pqs-server/graph/loaders"
	"github.com/aereal/poc-graphql-pqs-server/graph/persistedquery/apollo"
	"github.com/aereal/poc-graphql-pqs-server/graph/resolvers"
	"github.com/aereal/poc-graphql-pqs-server/infra"
	"github.com/aereal/poc-graphql-pqs-server/otel/otelinstrument"
	"github.com/aereal/poc-graphql-pqs-server/web"
)

// Injectors from wire.go:

func initialize(ctx context.Context) (*app, error) {
	configConfig, err := config.ProvideConfigFromEnv()
	if err != nil {
		return nil, err
	}
	port := configConfig.Port
	otelinstrumentConfig := configConfig.OtelConfig
	instrumentation, err := otelinstrument.ProvideInstrumentation(ctx, otelinstrumentConfig)
	if err != nil {
		return nil, err
	}
	tracerProvider := otelinstrument.ProvideTracerProvider(instrumentation)
	dbConnectInfo := configConfig.DBConnectInfo
	db, err := infra.ProvideDB(tracerProvider, dbConnectInfo)
	if err != nil {
		return nil, err
	}
	characterRepository, err := domain.ProvideCharacterRepository(tracerProvider, db)
	if err != nil {
		return nil, err
	}
	resolver, err := resolvers.Provide(characterRepository)
	if err != nil {
		return nil, err
	}
	executableSchema, err := graph.ProvideExecutableSchema(resolver)
	if err != nil {
		return nil, err
	}
	root, err := loaders.Provide(characterRepository)
	if err != nil {
		return nil, err
	}
	manifestFilePath := configConfig.PersistedQueryManifestFile
	manifest, err := apollo.ProvideManifestFromPath(manifestFilePath)
	if err != nil {
		return nil, err
	}
	cache, err := apollo.ProvideQueryCacheFromManifest(manifest)
	if err != nil {
		return nil, err
	}
	server, err := web.ProvideServer(port, executableSchema, root, cache, tracerProvider)
	if err != nil {
		return nil, err
	}
	mainApp := provideApp(server, instrumentation)
	return mainApp, nil
}
